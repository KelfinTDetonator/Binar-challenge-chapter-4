{
  "openapi": "3.0.3",
  "info": {
    "title": "Simple Banking System",
    "version": "1.0.11"
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "servers": [
    {
      "url": "https://crud-basic-banking-system.vercel.app/api/v1"
    }
  ],
  "tags": [
    {
      "name": "users",
      "description": "User API"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "paths": {
    "/auth/register": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "users"
        ],
        "summary": "Register an account",
        "description": "Register a new account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "identity_number": {
                    "type": "integer"
                  },
                  "identity_type": {
                    "type": "string"
                  },
                  "address": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        },
                        "password": {
                          "type": "string"
                        },
                        "profile": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "number"
                            },
                            "identity_type": {
                              "type": "string"
                            },
                            "identity_number": {
                              "type": "string"
                            },
                            "address": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "message": {
                      "enum": [
                        "User created successfully"
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Syntax Error"
          },
          "409": {
            "description": "user is exist, login with your account instead"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "users"
        ],
        "summary": "Login user",
        "description": "Login user with email and password + JWT Auth",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Fetch user success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "token": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad syntax"
          },
          "401": {
            "description": "Email or password may be incorrect"
          },
          "403": {
            "description": "Invalid credential"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/auth/authenticate": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "users"
        ],
        "summary": "Get user logged in",
        "description": "user logged in after authenticated",
        "responses": {
          "200": {
            "description": "Fetch user success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        }
                      }
                    },
                    "message": {
                      "enum": [
                        "Fetch user success"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Update user by id",
        "description": "Update a single user",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Update an existent pet in the store",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "identity_type": {
                    "type": "string"
                  },
                  "identity_number": {
                    "type": "string"
                  },
                  "address": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User info updated!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        },
                        "password": {
                          "type": "string"
                        },
                        "identity_type": {
                          "type": "string"
                        },
                        "identity_number": {
                          "type": "string"
                        },
                        "address": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad syntax"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "Update user by id",
        "description": "Update a single user",
        "requestBody": {
          "description": "Update an existent pet in the store",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "identity_type": {
                    "type": "string"
                  },
                  "identity_number": {
                    "type": "string"
                  },
                  "address": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": false
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user to updates",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User info updated!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        },
                        "password": {
                          "type": "string"
                        },
                        "identity_type": {
                          "type": "string"
                        },
                        "identity_number": {
                          "type": "string"
                        },
                        "address": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad syntax"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete user by id",
        "description": "Delete a single user & profile",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User & Profile has deleted!"
          },
          "400": {
            "description": "Bad syntax"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/transactions": {
      "post": {
        "tags": [
          "transactions"
        ],
        "summary": "Post transaction",
        "description": "Post transaction with source account, destination account, and amount are required",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "source_account_id": {
                    "type": "integer"
                  },
                  "destination_account_id": {
                    "type": "integer"
                  },
                  "amount": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Transaction successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "source_account_id": {
                          "type": "integer"
                        },
                        "destination_account_id": {
                          "type": "integer"
                        },
                        "amount": {
                          "type": "integer"
                        }
                      }
                    },
                    "message": {
                      "enum": [
                        "Transaction successful"
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad syntax"
          },
          "404": {
            "description": "Destination account/Source account not found"
          }
        }
      },
      "get": {
        "tags": [
          "transactions"
        ],
        "summary": "Find all transactions",
        "description": "Returns all transactions",
        "responses": {
          "200": {
            "description": "get all transactions successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "xml": {
                    "wrapped": true
                  },
                  "items": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer"
                          },
                          "source_account_id": {
                            "type": "integer"
                          },
                          "destination_account_id": {
                            "type": "integer"
                          },
                          "amount": {
                            "type": "integer"
                          }
                        }
                      },
                      "message": {
                        "enum": [
                          "fetch transactions data success"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad syntax"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/transactions/{id}": {
      "get": {
        "tags": [
          "transactions"
        ],
        "summary": "Find transaction by an id",
        "description": "Returns an object contains transaction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of transaction to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "get transaction success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "source_account_id": {
                          "type": "integer"
                        },
                        "destination_account_id": {
                          "type": "integer"
                        },
                        "amount": {
                          "type": "integer"
                        },
                        "source_account_info": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer"
                            },
                            "name": {
                              "type": "string"
                            }
                          }
                        },
                        "destination_account_info": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer"
                            },
                            "name": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "message": {
                      "enum": [
                        "fetch transaction data success"
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "ID must be a number (Bad Syntax Error)"
          },
          "404": {
            "description": "Transaction does not exist"
          }
        }
      },
      "delete": {
        "tags": [
          "transactions"
        ],
        "summary": "Delete a transaction by an id",
        "description": "Delete an object contains transaction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of transaction to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete transaction success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "enum": [
                        "Transaction deleted"
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "ID must be a number / Bad Syntax Error"
          },
          "404": {
            "description": "Transaction does not exist"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/accounts": {
      "post": {
        "tags": [
          "accounts"
        ],
        "summary": "Post accounts",
        "description": "Post accounts with bank name, bank account number, and balance are required",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "bank_name": {
                    "type": "string"
                  },
                  "bank_account_number": {
                    "type": "string"
                  },
                  "balance": {
                    "type": "string"
                  },
                  "user_id": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create account successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "bank_name": {
                          "type": "string"
                        },
                        "bank_account_number": {
                          "type": "string"
                        },
                        "balance": {
                          "type": "string"
                        },
                        "user_id": {
                          "type": "integer"
                        }
                      }
                    },
                    "message": {
                      "enum": [
                        "Account created successfully"
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Syntax Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "enum": [
                        "User_id must be a number"
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "enum": [
                        "Account number should be unique"
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "enum": [
                        "User not exist"
                      ]
                    },
                    "message2": {
                      "enum": [
                        "Account not found"
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Find all accounts",
        "description": "Get all accounts object",
        "responses": {
          "200": {
            "description": "get all transactions successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "xml": {
                    "wrapped": true
                  },
                  "items": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer"
                          },
                          "bank_name": {
                            "type": "string"
                          },
                          "bank_account_number": {
                            "type": "string"
                          },
                          "balance": {
                            "type": "string"
                          },
                          "user_id": {
                            "type": "integer"
                          }
                        }
                      },
                      "message": {
                        "enum": [
                          "Get all accounts success"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/accounts/{id}": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Find an account details by id",
        "description": "Returns an account object",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of transaction to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "get transaction by id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "bank_name": {
                          "type": "string"
                        },
                        "bank_account_number": {
                          "type": "string"
                        },
                        "balance": {
                          "type": "string"
                        },
                        "user_id": {
                          "type": "integer"
                        }
                      }
                    },
                    "message": {
                      "enum": [
                        "Fetch account data success"
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Syntax Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "enum": [
                        "Account ID must be a number"
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "enum": [
                        "Account not found"
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "accounts"
        ],
        "summary": "Delete an account",
        "description": "Delete an account object",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of transaction to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "get transaction by id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "enum": [
                        "Account deleted"
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Syntax Error"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  }
}